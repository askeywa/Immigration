name: Deploy to EC2

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Build backend
        run: |
          cd backend
          npm run build
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Create Production Environment File
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          SUPER_ADMIN_DOMAIN: ${{ secrets.SUPER_ADMIN_DOMAIN }}
          MAIN_DOMAIN: ${{ secrets.MAIN_DOMAIN }}
          TENANT_DOMAIN_PREFIX: ${{ secrets.TENANT_DOMAIN_PREFIX }}
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_PRIVATE_IP: ${{ secrets.EC2_PRIVATE_IP }}
          EC2_PUBLIC_DNS: ${{ secrets.EC2_PUBLIC_DNS }}
          RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
          REDIS_ENABLED: ${{ secrets.REDIS_ENABLED }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_RELEASE: ${{ secrets.SENTRY_RELEASE }}
          SENTRY_TRACES_SAMPLE_RATE: ${{ secrets.SENTRY_TRACES_SAMPLE_RATE }}
          SENTRY_PROFILES_SAMPLE_RATE: ${{ secrets.SENTRY_PROFILES_SAMPLE_RATE }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME: ${{ secrets.NEW_RELIC_APP_NAME }}
          NEW_RELIC_ENABLED: ${{ secrets.NEW_RELIC_ENABLED }}
          APP_NAME: ${{ secrets.APP_NAME }}
          ALLOW_START_WITHOUT_DB: ${{ secrets.ALLOW_START_WITHOUT_DB }}
        run: |
          cat > env.production << EOF
          NODE_ENV=production
          PORT=5000
          FRONTEND_URL=${FRONTEND_URL}
          
          # Super Admin Configuration
          SUPER_ADMIN_DOMAIN=${SUPER_ADMIN_DOMAIN}
          
          # Database
          MONGODB_URI=${MONGODB_URI}
          
          # JWT
          JWT_SECRET=${JWT_SECRET}
          JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
          
          # Domain Configuration
          MAIN_DOMAIN=${MAIN_DOMAIN}
          TENANT_DOMAIN_PREFIX=${TENANT_DOMAIN_PREFIX}
          
          # Rate Limiting
          RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
          RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
          
          # Redis
          REDIS_ENABLED=${REDIS_ENABLED}
          REDIS_URL=${REDIS_URL}
          REDIS_PASSWORD=${REDIS_PASSWORD}
          
          # Sentry
          SENTRY_DSN=${SENTRY_DSN}
          SENTRY_RELEASE=${SENTRY_RELEASE}
          SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE}
          SENTRY_PROFILES_SAMPLE_RATE=${SENTRY_PROFILES_SAMPLE_RATE}
          
          # New Relic
          NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
          NEW_RELIC_APP_NAME=${NEW_RELIC_APP_NAME}
          NEW_RELIC_ENABLED=${NEW_RELIC_ENABLED}
          
          # EC2 Configuration
          EC2_PUBLIC_IP=${EC2_PUBLIC_IP}
          EC2_PRIVATE_IP=${EC2_PRIVATE_IP}
          EC2_PUBLIC_DNS=${EC2_PUBLIC_DNS}
          
          # API Configuration
          API_BASE_URL=${API_BASE_URL}
          
          # App Configuration
          APP_NAME=${APP_NAME}
          ALLOW_START_WITHOUT_DB=${ALLOW_START_WITHOUT_DB}
          EOF
      
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Create directory structure and deploy application
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} '
            # Create directory structure if it doesn'\''t exist
            sudo mkdir -p /var/www/immigration-portal/backend
            sudo mkdir -p /var/www/immigration-portal/frontend
            
            # Set proper ownership
            sudo chown -R ubuntu:ubuntu /var/www/immigration-portal
            
            # Clone or update repository
            if [ ! -d "/var/www/immigration-portal/.git" ]; then
              cd /var/www/immigration-portal
              git clone https://github.com/askeywa/Immigration.git .
            else
              cd /var/www/immigration-portal
              git pull origin main
            fi
            
            # Install dependencies
            cd /var/www/immigration-portal/backend && npm install
            cd /var/www/immigration-portal/frontend && npm install
            
            # Build applications
            cd /var/www/immigration-portal/backend && npm run build
            cd /var/www/immigration-portal/frontend && npm run build
            
            # Install PM2 globally if not installed
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi
            
            # Install and configure Redis
            if ! command -v redis-server &> /dev/null; then
              sudo apt update
              sudo apt install redis-server redis-tools -y
            fi
            
            # Configure Redis with password
            sudo tee /etc/redis/redis.conf > /dev/null << '\''EOF'\''
            # Redis configuration for Immigration Portal
            bind 127.0.0.1
            port 6379
            timeout 0
            tcp-keepalive 300
            requirepass Qwsaqwsa!@34
            maxmemory 512mb
            maxmemory-policy allkeys-lru
            save 900 1
            save 300 10
            save 60 10000
            stop-writes-on-bgsave-error yes
            rdbcompression yes
            rdbchecksum yes
            dbfilename dump.rdb
            dir /var/lib/redis
            loglevel notice
            logfile /var/log/redis/redis-server.log
            maxclients 10000
            slowlog-log-slower-than 10000
            slowlog-max-len 128
            EOF
            
            # Start and enable Redis
            sudo systemctl restart redis-server
            sudo systemctl enable redis-server
            
            # Start/Restart application with PM2
            cd /var/www/immigration-portal/backend
            pm2 delete immigration-portal 2>/dev/null || true
            pm2 start ecosystem.config.js --env production
            pm2 save
            pm2 startup
          '
          
          # Copy environment file after directory structure is created
          scp -i private_key.pem -o StrictHostKeyChecking=no env.production ${USER}@${HOST}:/var/www/immigration-portal/backend/.env
          
          rm -f private_key.pem
