name: Deploy to EC2

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Build backend
        run: |
          cd backend
          npm run build
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Create Production Environment File
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          SUPER_ADMIN_DOMAIN: ${{ secrets.SUPER_ADMIN_DOMAIN }}
          MAIN_DOMAIN: ${{ secrets.MAIN_DOMAIN }}
          TENANT_DOMAIN_PREFIX: ${{ secrets.TENANT_DOMAIN_PREFIX }}
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_PRIVATE_IP: ${{ secrets.EC2_PRIVATE_IP }}
          EC2_PUBLIC_DNS: ${{ secrets.EC2_PUBLIC_DNS }}
          RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
          REDIS_ENABLED: ${{ secrets.REDIS_ENABLED }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_RELEASE: ${{ secrets.SENTRY_RELEASE }}
          SENTRY_TRACES_SAMPLE_RATE: ${{ secrets.SENTRY_TRACES_SAMPLE_RATE }}
          SENTRY_PROFILES_SAMPLE_RATE: ${{ secrets.SENTRY_PROFILES_SAMPLE_RATE }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME: ${{ secrets.NEW_RELIC_APP_NAME }}
          NEW_RELIC_ENABLED: ${{ secrets.NEW_RELIC_ENABLED }}
          APP_NAME: ${{ secrets.APP_NAME }}
          ALLOW_START_WITHOUT_DB: ${{ secrets.ALLOW_START_WITHOUT_DB }}
          ALLOWED_SUPER_ADMIN_DOMAINS: ${{ secrets.ALLOWED_SUPER_ADMIN_DOMAINS }}
        run: |
          cat > env.production << 'EOF'
          NODE_ENV=production
          PORT=5000
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          
          # Super Admin Configuration
          SUPER_ADMIN_DOMAIN=${{ secrets.SUPER_ADMIN_DOMAIN }}
          ALLOWED_SUPER_ADMIN_DOMAINS=${{ secrets.ALLOWED_SUPER_ADMIN_DOMAINS }}
          
          # Database
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          
          # JWT
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          
          # Domain Configuration
          MAIN_DOMAIN=${{ secrets.MAIN_DOMAIN }}
          TENANT_DOMAIN_PREFIX=${{ secrets.TENANT_DOMAIN_PREFIX }}
          
          # Rate Limiting
          RATE_LIMIT_WINDOW_MS=${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS=${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
          
          # Redis
          REDIS_ENABLED=${{ secrets.REDIS_ENABLED }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          
          # Sentry
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          SENTRY_RELEASE=${{ secrets.SENTRY_RELEASE }}
          SENTRY_TRACES_SAMPLE_RATE=${{ secrets.SENTRY_TRACES_SAMPLE_RATE }}
          SENTRY_PROFILES_SAMPLE_RATE=${{ secrets.SENTRY_PROFILES_SAMPLE_RATE }}
          
          # New Relic
          NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME=${{ secrets.NEW_RELIC_APP_NAME }}
          NEW_RELIC_ENABLED=${{ secrets.NEW_RELIC_ENABLED }}
          
          # EC2 Configuration
          EC2_PUBLIC_IP=${{ secrets.EC2_PUBLIC_IP }}
          EC2_PRIVATE_IP=${{ secrets.EC2_PRIVATE_IP }}
          EC2_PUBLIC_DNS=${{ secrets.EC2_PUBLIC_DNS }}
          
          # API Configuration
          API_BASE_URL=${{ secrets.API_BASE_URL }}
          
          # App Configuration
          APP_NAME=${{ secrets.APP_NAME }}
          ALLOW_START_WITHOUT_DB=${{ secrets.ALLOW_START_WITHOUT_DB }}
          EOF
      
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Copy environment file FIRST (before deployment)
          echo "Copying environment file..."
          scp -i private_key.pem -o StrictHostKeyChecking=no env.production ${USER}@${HOST}:/tmp/env.production
          
          # Deploy application
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} << 'ENDSSH'
            set -e  # Exit on any error
            
            echo "Creating directory structure..."
            sudo mkdir -p /var/www/immigration-portal/backend
            sudo mkdir -p /var/www/immigration-portal/frontend
            sudo chown -R ubuntu:ubuntu /var/www/immigration-portal
            
            # Move env file to correct location
            mv /tmp/env.production /var/www/immigration-portal/backend/.env
            chmod 600 /var/www/immigration-portal/backend/.env
            
            echo "Updating repository..."
            if [ ! -d "/var/www/immigration-portal/.git" ]; then
              cd /var/www/immigration-portal
              git clone https://github.com/askeywa/Immigration.git .
            else
              cd /var/www/immigration-portal
              # Force clean any local changes
              git fetch origin main
              git reset --hard origin/main
              git clean -fd
            fi
            
            echo "Installing backend dependencies..."
            cd /var/www/immigration-portal/backend
            npm install
            
            echo "Installing frontend dependencies..."
            cd /var/www/immigration-portal/frontend
            npm install
            
            echo "Building backend..."
            cd /var/www/immigration-portal/backend
            npm run build
            
            echo "Building frontend..."
            cd /var/www/immigration-portal/frontend
            npm run build
            
            echo "Installing PM2 if needed..."
            if ! command -v pm2 &> /dev/null; then
              sudo npm install -g pm2
            fi
            
            echo "Setting up Redis..."
            if ! command -v redis-server &> /dev/null; then
              sudo apt update
              sudo apt install redis-server redis-tools -y
            fi
            
            # Configure Redis with proper sudo permissions
            sudo sed -i 's/^bind .*/bind 127.0.0.1/' /etc/redis/redis.conf
            sudo sed -i 's/^# *requirepass .*/requirepass Qwsaqwsa!@34/' /etc/redis/redis.conf
            sudo sed -i 's/^requirepass .*/requirepass Qwsaqwsa!@34/' /etc/redis/redis.conf
            sudo sed -i 's/^# *maxmemory .*/maxmemory 512mb/' /etc/redis/redis.conf
            sudo sed -i 's/^# *maxmemory-policy .*/maxmemory-policy allkeys-lru/' /etc/redis/redis.conf
            
            # Ensure requirepass exists (use sudo for grep too)
            if ! sudo grep -q "^requirepass" /etc/redis/redis.conf; then
              echo "requirepass Qwsaqwsa!@34" | sudo tee -a /etc/redis/redis.conf > /dev/null
            fi
            
            # Test Redis config before restarting
            if sudo redis-server /etc/redis/redis.conf --test-memory 1 2>/dev/null; then
              echo "Redis configuration is valid"
            else
              echo "Warning: Redis configuration test failed, but continuing..."
            fi
            
            sudo systemctl restart redis-server
            sudo systemctl enable redis-server
            
            if sudo systemctl is-active --quiet redis-server; then
              echo "Redis started successfully"
            else
              echo "Warning: Redis failed to start"
            fi
            
            echo "Creating logs directory..."
            mkdir -p /var/www/immigration-portal/backend/logs
            
            echo "Stopping existing PM2 processes..."
            pm2 delete all 2>/dev/null || true
            pm2 kill 2>/dev/null || true
            
            echo "Verifying build artifacts..."
            cd /var/www/immigration-portal/backend
            
            if [ ! -f "dist/server.js" ]; then
              echo "ERROR: dist/server.js not found!"
              ls -la dist/ || echo "dist directory not found"
              exit 1
            fi
            
            if [ ! -f ".env" ]; then
              echo "ERROR: .env file not found!"
              exit 1
            fi
            
            echo "Starting application with PM2..."
            if [ -f "ecosystem.config.js" ]; then
              pm2 start ecosystem.config.js --env production
            else
              pm2 start dist/server.js --name "immigration-portal" --env production
            fi
            
            # Wait for application to start
            echo "Waiting for application to start..."
            sleep 15
            
            echo "PM2 Status:"
            pm2 status
            
            # Verify PM2 started successfully
            if pm2 list | grep -q "immigration-portal.*online"; then
              echo "Application started successfully!"
            else
              echo "ERROR: Application failed to start"
              echo "PM2 Logs:"
              pm2 logs --lines 50 --nostream
              exit 1
            fi
            
            pm2 save
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ubuntu --hp /home/ubuntu
            
            echo "Deployment completed successfully!"
          ENDSSH
          
          # Final verification
          echo "Final health check..."
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} << 'ENDVERIFY'
            sleep 10
            
            # Check if health endpoint responds
            if curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
              echo "Application health check passed!"
              curl -s http://localhost:5000/api/health | jq '.' || echo "Health check response received"
            else
              echo "Application health check failed"
              echo "Recent PM2 logs:"
              pm2 logs immigration-portal --lines 20 --nostream
              exit 1
            fi
            
            echo "Deployment verification complete!"
          ENDVERIFY
          
          rm -f private_key.pem
          echo "Deployment finished successfully!"