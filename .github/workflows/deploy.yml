name: Deploy to EC2

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Build backend
        run: |
          cd backend
          npm run build
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Create Production Environment File
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          SUPER_ADMIN_DOMAIN: ${{ secrets.SUPER_ADMIN_DOMAIN }}
          MAIN_DOMAIN: ${{ secrets.MAIN_DOMAIN }}
          TENANT_DOMAIN_PREFIX: ${{ secrets.TENANT_DOMAIN_PREFIX }}
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_PRIVATE_IP: ${{ secrets.EC2_PRIVATE_IP }}
          EC2_PUBLIC_DNS: ${{ secrets.EC2_PUBLIC_DNS }}
          RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
          REDIS_ENABLED: ${{ secrets.REDIS_ENABLED }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          APP_NAME: ${{ secrets.APP_NAME }}
          ALLOW_START_WITHOUT_DB: ${{ secrets.ALLOW_START_WITHOUT_DB }}
        run: |
          cat > env.production << EOF
          NODE_ENV=production
          PORT=5000
          FRONTEND_URL=${FRONTEND_URL}
          
          # Super Admin Configuration
          SUPER_ADMIN_DOMAIN=${SUPER_ADMIN_DOMAIN}
          
          # Database
          MONGODB_URI=${MONGODB_URI}
          
          # JWT
          JWT_SECRET=${JWT_SECRET}
          JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
          
          # Domain Configuration
          MAIN_DOMAIN=${MAIN_DOMAIN}
          TENANT_DOMAIN_PREFIX=${TENANT_DOMAIN_PREFIX}
          
          # Rate Limiting
          RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
          RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
          
          # Redis
          REDIS_ENABLED=${REDIS_ENABLED}
          REDIS_URL=${REDIS_URL}
          
          # EC2 Configuration
          EC2_PUBLIC_IP=${EC2_PUBLIC_IP}
          EC2_PRIVATE_IP=${EC2_PRIVATE_IP}
          EC2_PUBLIC_DNS=${EC2_PUBLIC_DNS}
          
          # API Configuration
          API_BASE_URL=${API_BASE_URL}
          
          # App Configuration
          APP_NAME=${APP_NAME}
          ALLOW_START_WITHOUT_DB=${ALLOW_START_WITHOUT_DB}
          EOF
      
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Copy environment file
          scp -i private_key.pem -o StrictHostKeyChecking=no env.production ${USER}@${HOST}:/home/ubuntu/app/backend/.env
          
          # Deploy application
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} '
            cd /home/ubuntu/app &&
            git pull origin main &&
            npm install &&
            npm run build &&
            pm2 reload ecosystem.config.js --env production
          '
          
          rm -f private_key.pem
