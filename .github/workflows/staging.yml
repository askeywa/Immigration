name: Deploy to Staging

on:
  push:
    branches: [ develop, staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - development

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Cache Backend Build
        uses: actions/cache@v3
        with:
          path: |
            backend/dist
            backend/node_modules/.cache
          key: ${{ runner.os }}-staging-backend-${{ hashFiles('backend/package-lock.json', 'backend/src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-staging-backend-
      
      - name: Cache Frontend Build
        uses: actions/cache@v3
        with:
          path: |
            frontend/dist
            frontend/node_modules/.cache
          key: ${{ runner.os }}-staging-frontend-${{ hashFiles('frontend/package-lock.json', 'frontend/src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-staging-frontend-
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run Backend Tests
        run: |
          cd backend
          if npm run test --if-present; then
            echo "✅ Backend tests passed"
          else
            echo "⚠️ Backend tests not configured, skipping"
          fi
      
      - name: Run Frontend Tests
        run: |
          cd frontend
          if npm run test --if-present; then
            echo "✅ Frontend tests passed"
          else
            echo "⚠️ Frontend tests not configured, skipping"
          fi
      
      - name: Run Linting
        run: |
          echo "🔍 Running linting checks..."
          
          # Backend linting
          echo "Linting backend..."
          cd backend
          if npm run lint --if-present; then
            echo "✅ Backend linting passed"
          else
            echo "⚠️ Backend linting failed or not configured"
          fi
          
          # Frontend linting
          echo "Linting frontend..."
          cd ../frontend
          if npm run lint --if-present; then
            echo "✅ Frontend linting passed"
          else
            echo "⚠️ Frontend linting failed or not configured"
          fi
          
          echo "🔍 Linting checks completed"
      
      - name: Build backend
        run: |
          cd backend
          npm run build
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      
      - name: Create Staging Environment File
        env:
          MONGODB_URI: ${{ secrets.STAGING_MONGODB_URI }}
          JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.STAGING_JWT_REFRESH_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.STAGING_JWT_EXPIRES_IN }}
          FRONTEND_URL: ${{ secrets.STAGING_FRONTEND_URL }}
          SUPER_ADMIN_DOMAIN: ${{ secrets.STAGING_SUPER_ADMIN_DOMAIN }}
          MAIN_DOMAIN: ${{ secrets.STAGING_MAIN_DOMAIN }}
          TENANT_DOMAIN_PREFIX: ${{ secrets.STAGING_TENANT_DOMAIN_PREFIX }}
          API_BASE_URL: ${{ secrets.STAGING_API_BASE_URL }}
          EC2_PUBLIC_IP: ${{ secrets.STAGING_EC2_PUBLIC_IP }}
          EC2_PRIVATE_IP: ${{ secrets.STAGING_EC2_PRIVATE_IP }}
          EC2_PUBLIC_DNS: ${{ secrets.STAGING_EC2_PUBLIC_DNS }}
          RATE_LIMIT_WINDOW_MS: ${{ secrets.STAGING_RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS: ${{ secrets.STAGING_RATE_LIMIT_MAX_REQUESTS }}
          REDIS_ENABLED: ${{ secrets.STAGING_REDIS_ENABLED }}
          REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
          REDIS_PASSWORD: ${{ secrets.STAGING_REDIS_PASSWORD }}
          SENTRY_DSN: ${{ secrets.STAGING_SENTRY_DSN }}
          SENTRY_RELEASE: ${{ secrets.STAGING_SENTRY_RELEASE }}
          SENTRY_TRACES_SAMPLE_RATE: ${{ secrets.STAGING_SENTRY_TRACES_SAMPLE_RATE }}
          SENTRY_PROFILES_SAMPLE_RATE: ${{ secrets.STAGING_SENTRY_PROFILES_SAMPLE_RATE }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.STAGING_NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME: ${{ secrets.STAGING_NEW_RELIC_APP_NAME }}
          NEW_RELIC_ENABLED: ${{ secrets.STAGING_NEW_RELIC_ENABLED }}
          APP_NAME: ${{ secrets.STAGING_APP_NAME }}
          ALLOW_START_WITHOUT_DB: ${{ secrets.STAGING_ALLOW_START_WITHOUT_DB }}
          ALLOWED_SUPER_ADMIN_DOMAINS: ${{ secrets.STAGING_ALLOWED_SUPER_ADMIN_DOMAINS }}
        run: |
          cat > env.staging << 'EOF'
          NODE_ENV=staging
          PORT=5001
          FRONTEND_URL=${{ secrets.STAGING_FRONTEND_URL }}
          
          # Super Admin Configuration
          SUPER_ADMIN_DOMAIN=${{ secrets.STAGING_SUPER_ADMIN_DOMAIN }}
          ALLOWED_SUPER_ADMIN_DOMAINS=${{ secrets.STAGING_ALLOWED_SUPER_ADMIN_DOMAINS }}
          
          # Database
          MONGODB_URI=${{ secrets.STAGING_MONGODB_URI }}
          
          # JWT
          JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.STAGING_JWT_REFRESH_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.STAGING_JWT_EXPIRES_IN }}
          
          # Domain Configuration
          MAIN_DOMAIN=${{ secrets.STAGING_MAIN_DOMAIN }}
          TENANT_DOMAIN_PREFIX=${{ secrets.STAGING_TENANT_DOMAIN_PREFIX }}
          
          # Rate Limiting
          RATE_LIMIT_WINDOW_MS=${{ secrets.STAGING_RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS=${{ secrets.STAGING_RATE_LIMIT_MAX_REQUESTS }}
          
          # Redis
          REDIS_ENABLED=${{ secrets.STAGING_REDIS_ENABLED }}
          REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
          REDIS_PASSWORD=${{ secrets.STAGING_REDIS_PASSWORD }}
          
          # Sentry
          SENTRY_DSN=${{ secrets.STAGING_SENTRY_DSN }}
          SENTRY_RELEASE=${{ secrets.STAGING_SENTRY_RELEASE }}
          SENTRY_TRACES_SAMPLE_RATE=${{ secrets.STAGING_SENTRY_TRACES_SAMPLE_RATE }}
          SENTRY_PROFILES_SAMPLE_RATE=${{ secrets.STAGING_SENTRY_PROFILES_SAMPLE_RATE }}
          
          # New Relic
          NEW_RELIC_LICENSE_KEY=${{ secrets.STAGING_NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME=${{ secrets.STAGING_NEW_RELIC_APP_NAME }}
          NEW_RELIC_ENABLED=${{ secrets.STAGING_NEW_RELIC_ENABLED }}
          
          # EC2 Configuration
          EC2_PUBLIC_IP=${{ secrets.STAGING_EC2_PUBLIC_IP }}
          EC2_PRIVATE_IP=${{ secrets.STAGING_EC2_PRIVATE_IP }}
          EC2_PUBLIC_DNS=${{ secrets.STAGING_EC2_PUBLIC_DNS }}
          
          # API Configuration
          API_BASE_URL=${{ secrets.STAGING_API_BASE_URL }}
          
          # App Configuration
          APP_NAME=${{ secrets.STAGING_APP_NAME }}
          ALLOW_START_WITHOUT_DB=${{ secrets.STAGING_ALLOW_START_WITHOUT_DB }}
          EOF
      
      - name: Deploy to Staging EC2
        env:
          PRIVATE_KEY: ${{ secrets.STAGING_EC2_SSH_KEY }}
          HOST: ${{ secrets.STAGING_EC2_HOST }}
          USER: ${{ secrets.STAGING_EC2_USER }}
          REDIS_PASSWORD: ${{ secrets.STAGING_REDIS_PASSWORD }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Deploy to staging server
          scp -i private_key.pem -o StrictHostKeyChecking=no env.staging ${USER}@${HOST}:/var/www/immigration-portal-staging/backend/.env
          scp -i private_key.pem -o StrictHostKeyChecking=no -r backend/dist ${USER}@${HOST}:/var/www/immigration-portal-staging/backend/
          scp -i private_key.pem -o StrictHostKeyChecking=no -r frontend/dist ${USER}@${HOST}:/var/www/immigration-portal-staging/frontend/
          scp -i private_key.pem -o StrictHostKeyChecking=no backend/ecosystem.config.js ${USER}@${HOST}:/var/www/immigration-portal-staging/backend/
          
          # Deploy and restart on staging
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} '
            cd /var/www/immigration-portal-staging/backend
            pm2 reload ecosystem.config.js --env staging
            sleep 5
            if curl -f http://localhost:5001/api/health > /dev/null 2>&1; then
              echo "✅ Staging deployment successful!"
            else
              echo "❌ Staging deployment failed!"
              exit 1
            fi
          '
          
          rm -f private_key.pem
