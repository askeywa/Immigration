name: Blue-Green Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment for blue-green deployment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  blue-green-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies and build
        run: |
          cd backend && npm ci && npm run build
          cd ../frontend && npm ci && npm run build
      
      - name: Blue-Green Deployment
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} '
            echo "🔄 Starting Blue-Green Deployment for $ENVIRONMENT"
            
            # Determine current active environment
            if pm2 list | grep -q "immigration-portal.*online"; then
              CURRENT_ENV="blue"
              NEW_ENV="green"
              CURRENT_PORT=5000
              NEW_PORT=5001
            else
              CURRENT_ENV="green"
              NEW_ENV="blue"
              CURRENT_PORT=5001
              NEW_PORT=5000
            fi
            
            echo "Current active environment: $CURRENT_ENV (port $CURRENT_PORT)"
            echo "Deploying to new environment: $NEW_ENV (port $NEW_PORT)"
            
            # Create new environment directory
            NEW_DIR="/var/www/immigration-portal-$NEW_ENV"
            CURRENT_DIR="/var/www/immigration-portal-$CURRENT_ENV"
            
            echo "Creating new environment directory: $NEW_DIR"
            mkdir -p $NEW_DIR/backend $NEW_DIR/frontend
            
            # Copy current .env as base
            if [ -f "$CURRENT_DIR/backend/.env" ]; then
              cp $CURRENT_DIR/backend/.env $NEW_DIR/backend/.env
              # Update port in .env
              sed -i "s/PORT=.*/PORT=$NEW_PORT/" $NEW_DIR/backend/.env
            fi
            
            # Update ecosystem config for new port
            cat > $NEW_DIR/backend/ecosystem.config.js << EOF
          module.exports = {
            apps: [{
              name: "immigration-portal-$NEW_ENV",
              script: "./dist/server.js",
              instances: 1,
              exec_mode: "fork",
              autorestart: true,
              watch: false,
              max_memory_restart: "1G",
              env_file: "./.env",
              env_production: {
                NODE_ENV: "production",
                PORT: $NEW_PORT
              }
            }]
          };
          EOF
            
            echo "✅ Blue-Green setup completed"
            echo "New environment ready at port $NEW_PORT"
          '
          
          # Copy new build to green environment
          scp -i private_key.pem -o StrictHostKeyChecking=no backend/dist/* ${USER}@${HOST}:/var/www/immigration-portal-green/backend/dist/
          scp -i private_key.pem -o StrictHostKeyChecking=no frontend/dist/* ${USER}@${HOST}:/var/www/immigration-portal-green/frontend/dist/
          
          # Deploy and test new environment
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} '
            echo "🚀 Starting new environment..."
            cd /var/www/immigration-portal-green/backend
            pm2 start ecosystem.config.js --env production
            
            # Wait for new environment to be ready
            sleep 15
            
            # Health check new environment
            echo "🏥 Health checking new environment..."
            if curl -f http://localhost:5001/api/health > /dev/null 2>&1; then
              echo "✅ New environment is healthy!"
              
              # Update load balancer/nginx to point to new environment
              echo "🔄 Switching traffic to new environment..."
              
              # Update nginx config to point to new port
              sudo sed -i "s/proxy_pass http:\/\/localhost:5000;/proxy_pass http:\/\/localhost:5001;/" /etc/nginx/sites-available/default
              sudo nginx -t && sudo systemctl reload nginx
              
              echo "✅ Traffic switched to new environment!"
              
              # Stop old environment after a delay
              echo "⏳ Waiting 30 seconds before stopping old environment..."
              sleep 30
              
              if pm2 list | grep -q "immigration-portal.*online"; then
                echo "🛑 Stopping old environment..."
                pm2 stop immigration-portal 2>/dev/null || true
                pm2 delete immigration-portal 2>/dev/null || true
              fi
              
              # Rename new environment to standard name
              pm2 stop immigration-portal-green 2>/dev/null || true
              pm2 delete immigration-portal-green 2>/dev/null || true
              pm2 start /var/www/immigration-portal-green/backend/ecosystem.config.js --name "immigration-portal"
              
              echo "🎉 Blue-Green deployment completed successfully!"
              
            else
              echo "❌ New environment failed health check!"
              echo "🔄 Rolling back to previous environment..."
              
              # Stop failed new environment
              pm2 stop immigration-portal-green 2>/dev/null || true
              pm2 delete immigration-portal-green 2>/dev/null || true
              
              # Ensure old environment is running
              if ! pm2 list | grep -q "immigration-portal.*online"; then
                echo "🚀 Restarting previous environment..."
                cd /var/www/immigration-portal-blue/backend
                pm2 start ecosystem.config.js --name "immigration-portal"
              fi
              
              exit 1
            fi
          '
          
          rm -f private_key.pem
